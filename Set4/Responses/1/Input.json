{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Mathematical Document Wrapper",
  "description": "JSON schema for a structured mathematical document.",
  "type": "object",
  "properties": {
    "document": {
      "type": "array",
      "description": "The root of the mathematical document, containing a sequence of environments.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/Theorem"
          }
        ]
      }
    }
  },
  "required": [
    "document"
  ],
  "additionalProperties": false,
  "$defs": {
    "Theorem": {
      "type": "object",
      "description": "A mathematical theorem, lemma, proposition, corollary, or claim.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Theorem"
        },
        "hypothesis": {
          "type": "array",
          "description": "(OPTIONAL) The hypothesis or assumptions of the theorem, consisting of statements like 'let', 'assume', etc.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/let_statement"
              }
            ]
          }
        },
        "claim": {
          "type": "string",
          "description": "The statement."
        },
        "label": {
          "type": "string",
          "description": "Unique identifier/label for referencing (e.g., 'thm:main', 'lem:pumping')."
        },
        "proof": {
          "$ref": "#/$defs/Proof",
          "description": "Proof of the theorems, if it is present soon after the statement."
        },
        "header": {
          "type": "string",
          "description": "The type of theorem-like environment. Must be one of the predefined values.",
          "enum": [
            "Theorem"
          ]
        }
      },
      "required": [
        "type",
        "label",
        "header",
        "claim"
      ],
      "additionalProperties": false
    },
    "Proof": {
      "type": "object",
      "description": "A proof environment.",
      "properties": {
        "type": {
          "type": "string",
          "const": "Proof"
        },
        "claim_label": {
          "type": "string",
          "description": "Theorem label being proved."
        },
        "proof_steps": {
          "type": "array",
          "description": "Steps in the proof.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/LogicalStepSequence"
              }
            ]
          }
        }
      },
      "required": [
        "type",
        "claim_label",
        "proof_steps"
      ],
      "additionalProperties": false
    },
    "LogicalStepSequence": {
      "type": "array",
      "description": "A sequence of structured logical steps, typically used within a proof or derivation, consisting of statements like 'let', 'assert', 'assume', etc.",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/let_statement"
          },
          {
            "$ref": "#/$defs/assert_statement"
          },
          {
            "$ref": "#/$defs/some_statement"
          },
          {
            "$ref": "#/$defs/conclude_statement"
          }
        ]
      }
    },
    "let_statement": {
      "type": "object",
      "description": "A statement introducing a new variable with given value, type and/or property.",
      "properties": {
        "type": {
          "type": "string",
          "const": "let_statement"
        },
        "variable_name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "variable_type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "variable_name"
      ],
      "additionalProperties": false
    },
    "some_statement": {
      "type": "object",
      "description": "A statement introducing a new variable and saying that **some** value of this variable is as required (i.e., an existence statement). This is possibly with given type and/or property. This corresponds to statements like 'for some integer `n` ...' or 'There exists an integer `n` ....'",
      "properties": {
        "type": {
          "type": "string",
          "const": "some_statement"
        },
        "variable_name": {
          "type": "string"
        },
        "variable_kind": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "variable_name"
      ],
      "additionalProperties": false
    },
    "assert_statement": {
      "type": "object",
      "description": "A mathematical statement whose proof is a straightforward consequence of given and known results following some method.",
      "properties": {
        "type": {
          "type": "string",
          "const": "assert_statement"
        },
        "claim": {
          "type": "string"
        },
        "proof_method": {
          "type": "string"
        },
        "results_used": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "statement": {
                "type": "string"
              }
            },
            "required": [
              "statement"
            ],
            "additionalProperties": false
          }
        },
        "calculation": {
          "$ref": "#/$defs/calculation"
        }
      },
      "required": [
        "type",
        "claim"
      ],
      "additionalProperties": false
    },
    "calculation": {
      "type": "object",
      "description": "An equation, inequality, short calculation etc.",
      "properties": {
        "calculation_sequence": {
          "type": "array",
          "description": "A list of elements of type `calculation_step`.",
          "items": {
            "$ref": "#/$defs/calculation_step"
          }
        }
      }
    },
    "calculation_step": {
      "type": "string",
      "description": "A step, typically an equality or inequality, in a calculation or computation."
    },
    "conclude_statement": {
      "type": "object",
      "description": "Conclude a claim obtained from the steps so far. This is typically the final statement of a proof giving the conclusion of the theorem.",
      "properties": {
        "type": {
          "type": "string",
          "const": "conclude_statement"
        },
        "claim": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "claim"
      ],
      "additionalProperties": false
    }
  },
  "document": [
    {
      "type": "Theorem",
      "label": "thm:sum_of_even_and_odd",
      "header": "Theorem",
      "claim": "The sum of an even natural number and an odd natural number is an odd natural number.",
      "hypothesis": [
        {
          "type": "let_statement",
          "variable_name": "E",
          "variable_type": "even natural number"
        },
        {
          "type": "let_statement",
          "variable_name": "O",
          "variable_type": "odd natural number"
        }
      ],
      "proof": {
        "type": "Proof",
        "claim_label": "thm:sum_of_even_and_odd",
        "proof_steps": [
          [
            {
              "type": "some_statement",
              "variable_name": "p",
              "variable_kind": "natural number",
              "properties": "E = 2*p"
            },
            {
              "type": "some_statement",
              "variable_name": "q",
              "variable_kind": "natural number",
              "properties": "O = 2*q + 1"
            },
            {
              "type": "let_statement",
              "variable_name": "S",
              "value": "E + O"
            },
            {
              "type": "assert_statement",
              "claim": "S = 2*(p + q) + 1",
              "proof_method": "By substitution and simplification.",
              "calculation": {
                "calculation_sequence": [
                  "S = E + O",
                  "S = (2*p) + (2*q + 1)",
                  "S = 2*(p + q) + 1"
                ]
              }
            },
            {
              "type": "let_statement",
              "variable_name": "k",
              "value": "p + q"
            },
            {
              "type": "assert_statement",
              "claim": "k is a natural number.",
              "results_used": [
                {
                  "statement": "The sum of two natural numbers is another natural number."
                }
              ]
            },
            {
              "type": "assert_statement",
              "claim": "S = 2*k + 1",
              "proof_method": "By substituting k = p + q."
            },
            {
              "type": "assert_statement",
              "claim": "S is an odd number.",
              "results_used": [
                {
                  "statement": "S can be expressed as 2*k + 1 for some natural number k."
                },
                {
                  "statement": "The definition of an odd number."
                }
              ]
            },
            {
              "type": "conclude_statement",
              "claim": "The sum of an even natural number and an odd natural number is an odd natural number."
            }
          ]
        ]
      }
    }
  ]
}