{
  "top_code": "import Mathlib\nuniverse u v w u_1 u_2 u_3 u\u2081 u\u2082 u\u2083\nset_option maxHeartbeats 10000000\nset_option linter.unreachableTactic false\nopen Nat\n",
  "task": "lean_from_json_structured",
  "result": "success",
  "lean_code": "  def divisible_by_5_iff_last_digit_0_or_5.prop : Prop :=\n    \u2200 (n : \u2115), n % 10 = 0 \u2228 n % 10 = 5 \u2192 n % 5 = 0\n  theorem divisible_by_5_iff_last_digit_0_or_5 : \u2200 (n : \u2115), n % 10 = 0 \u2228 n % 10 = 5 \u2192 n % 5 = 0 :=\n    by\n    intro n a_13397840144843358689\n    if condition_539958120475410144 : n % 10 = 0 then\n      \n      have assert_14624567202372330351 : 10 \u2223 n :=\n        by\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: 10 \u2223 n\"\n        cases a_13397840144843358689 with\n        | inl h => sorry\n        | inr h_1 => sorry\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: 10 \u2223 n\"\n      have assert_17275661542556916749 : \u2200 (k : \u2115), n = 10 * k \u2192 n = 10 * k :=\n        by\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2200 (k : \u2115), n = 10 * k \u2192 n = 10 * k\"\n        simp only [imp_self, implies_true]\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2200 (k : \u2115), n = 10 * k \u2192 n = 10 * k\"\n      have assert_2084469990120369931 :\n        \u2200 (k : \u2115), n % 10 = 0 \u2228 n % 10 = 5 \u2192 n % 10 = 0 \u2192 n = 10 * k \u2192 n = 5 * (2 * k) :=\n        by\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2200 (k : \u2115), n % 10 = 0 \u2228 n % 10 = 5 \u2192 n % 10 = 0 \u2192 n = 10 * k \u2192 n = 5 * (2 * k)\"\n        intro k a a_1 a_2\n        subst a_2\n        simp_all only [mul_eq_mul_left_iff, OfNat.ofNat_ne_zero, or_false, OfNat.zero_ne_ofNat, dvd_mul_right,\n          implies_true, mul_mod_right]\n        sorry\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2200 (k : \u2115), n % 10 = 0 \u2228 n % 10 = 5 \u2192 n % 10 = 0 \u2192 n = 10 * k \u2192 n = 5 * (2 * k)\"\n      have assert_14491579695485910030 : \u2203 (k : \u2115), n = 10 * k :=\n        by\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k\"\n        simp_all only [OfNat.zero_ne_ofNat, or_false, implies_true, forall_const]\n        exact assert_14624567202372330351\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k\"\n      let \u27e8k, assert_13915564691081828623\u27e9 := assert_14491579695485910030\n      trace\n        \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer {aesopPremises := 5, autoPremises := 0} for goal: n % 5 = 0\"\n      subst assert_13915564691081828623\n      simp_all only [OfNat.zero_ne_ofNat, or_false, mul_mod_right, dvd_mul_right, mul_eq_mul_left_iff,\n        OfNat.ofNat_ne_zero, implies_true, forall_const, forall_eq']\n      trace\n        \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer {aesopPremises := 5, autoPremises := 0} for goal: n % 5 = 0\"\n    else\n      if condition_7373442126900311225 : n % 10 = 5 then\n        \n        have assert_4532435913572188164 : \u2203 (k : \u2115), n = 10 * k + 5 :=\n          by\n          trace\n            \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k + 5\"\n          simp_all only [false_or, OfNat.ofNat_ne_zero, not_false_eq_true]\n          sorry\n          trace\n            \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k + 5\"\n        let \u27e8k, assert_1284482720153497458\u27e9 := assert_4532435913572188164\n        have assert_8295422331937614310 : n = 5 * (2 * k + 1) :=\n          by\n          trace\n            \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: n = 5 * (2 * k + 1)\"\n          subst assert_1284482720153497458\n          simp_all only [OfNat.ofNat_ne_zero, or_true, not_false_eq_true, mul_add_mod_self_left, reduceMod,\n            Nat.add_right_cancel_iff, mul_eq_mul_left_iff, or_false, exists_eq']\n          sorry\n          trace\n            \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: n = 5 * (2 * k + 1)\"\n        have assert_3276261398144761483 : \u2203 (k : \u2115), n = 10 * k + 5 \u2227 5 \u2223 n :=\n          by\n          trace\n            \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k + 5 \u2227 5 \u2223 n\"\n          subst assert_8295422331937614310\n          simp_all only [mul_add_mod_self_left, reduceMod, OfNat.ofNat_ne_zero, or_true, not_false_eq_true,\n            Nat.add_right_cancel_iff, mul_eq_mul_left_iff, or_false, exists_eq', Nat.dvd_add_self_right,\n            exists_and_right, true_and]\n          sorry\n          trace\n            \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k + 5 \u2227 5 \u2223 n\"\n        let \u27e8k, assert_11588208384974479407\u27e9 := assert_3276261398144761483\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer {aesopPremises := 5, autoPremises := 0} for goal: n % 5 = 0\"\n        subst assert_8295422331937614310\n        simp_all only [mul_add_mod_self_left, reduceMod, OfNat.ofNat_ne_zero, or_true, not_false_eq_true,\n          Nat.add_right_cancel_iff, mul_eq_mul_left_iff, or_false, exists_eq', Nat.dvd_add_self_right, exists_and_right,\n          true_and, dvd_mul_right, and_true, add_mod_right]\n        subst assert_1284482720153497458\n        sorry\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer {aesopPremises := 5, autoPremises := 0} for goal: n % 5 = 0\"\n      else\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer {aesopPremises := 5, autoPremises := 0} for goal: n % 5 = 0\"\n        simp_all only [false_or, OfNat.ofNat_ne_zero, not_false_eq_true]\n        sorry\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer {aesopPremises := 5, autoPremises := 0} for goal: n % 5 = 0\"\n    done",
  "json_structured": {
    "document": [
      {
        "type": "Theorem",
        "label": "thm:div5",
        "header": "Theorem",
        "claim": "If the last digit of a number is 0 or 5, then it is divisible by 5."
      },
      {
        "type": "Proof",
        "proof_steps": [
          [
            {
              "variable_name": "n",
              "type": "let_statement",
              "statement": "Let the number be n."
            },
            {
              "type": "pattern_cases_statement",
              "proof_cases": [
                {
                  "type": "pattern_case",
                  "proof": {
                    "type": "Proof",
                    "proof_steps": [
                      [
                        {
                          "type": "assume_statement",
                          "assumption": "n % 10 = 0"
                        },
                        {
                          "type": "assert_statement",
                          "claim": "10 divides n"
                        },
                        {
                          "variable_name": "k",
                          "variable_kind": "integer",
                          "type": "some_statement",
                          "statement": "n = 10 * k"
                        },
                        {
                          "type": "assert_statement",
                          "claim": "n = 5 * (2 * k)"
                        },
                        {
                          "type": "assert_statement",
                          "claim": "5 divides n"
                        }
                      ]
                    ],
                    "claim_label": "thm:div5"
                  },
                  "pattern": "0"
                },
                {
                  "type": "pattern_case",
                  "proof": {
                    "type": "Proof",
                    "proof_steps": [
                      [
                        {
                          "type": "assume_statement",
                          "assumption": "n % 10 = 5"
                        },
                        {
                          "variable_name": "k",
                          "variable_kind": "integer",
                          "type": "some_statement",
                          "statement": "n = 10 * k + 5"
                        },
                        {
                          "type": "assert_statement",
                          "claim": "n = 5 * (2 * k + 1)"
                        },
                        {
                          "type": "assert_statement",
                          "claim": "5 divides n"
                        }
                      ]
                    ],
                    "claim_label": "thm:div5"
                  },
                  "pattern": "5"
                }
              ],
              "on": "n % 10"
            },
            {
              "type": "conclude_statement",
              "claim": "In both cases, 5 divides n."
            },
            {
              "type": "conclude_statement",
              "claim": "Thus, if the last digit of a number is 0 or 5, then it is divisible by 5."
            }
          ]
        ],
        "claim_label": "thm:div5"
      }
    ]
  },
  "greedy": false,
  "declarations": [
    "divisible_by_5_iff_last_digit_0_or_5.prop",
    "divisible_by_5_iff_last_digit_0_or_5"
  ]
}