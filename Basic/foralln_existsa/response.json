{
  "top_code": "import Mathlib\nuniverse u v w u_1 u_2 u_3 u\u2081 u\u2082 u\u2083\nset_option maxHeartbeats 10000000\nset_option linter.unreachableTactic false\nopen Nat\n",
  "task": "lean_from_json_structured",
  "result": "success",
  "lean_code": "theorem exists_nat_sub_gt_self : \u2200 (n : \u2115), \u2203 (m : \u2115), m - n > n :=\n    by\n    intro n\n    let m := n + (n + 1)\n    have assert_4980421081867424580 : n + 1 > n :=\n      by\n      trace \"Automation Tactics hammer [] for goal: n + 1 > n\"\n      simp_all only [gt_iff_lt, lt_add_iff_pos_right, zero_lt_one]\n    trace\n      \"Error: codegen: no function found for key calculation_sequence available keys are [(some Table), (some calculation), (some definition), (some object), (some image), (some section), (some assume_statement), (some some_statement), (some contradiction_statement), (some abstract), (some author), (some table), (some citation), (some assert_statement), (some title), (some multi-condition_cases_statement), (some proof), (some general_induction_statement), (some internalreference), (some theorem), (some conclude_statement), (some remark), (some induction_statement), (some metadata), (some paragraph), (some logicalstepsequence), (some let_statement), (some document), (some Figure), (some condition_cases_statement), (some figure), (some bi-implication_cases_statement), (some bibliography), (some pattern_cases_statement)]\"\n    have : \u2203 (m : \u2115), m - n > n :=\n      by\n      trace \"Automation Tactics hammer [] for goal: \u2203 m, m - n > n\"\n      simp_all only [gt_iff_lt, lt_add_iff_pos_right, lt_one_iff, pos_of_gt]\n      sorry\n    (expose_names; exact h)\n    trace \"Automation Tactics hammer for goal: \u2203 m, m - n > n\"\n    simp_all only [gt_iff_lt]\n    sorry",
  "json_structured": {
    "document": [
      {
        "type": "Theorem",
        "proof": {
          "type": "Proof",
          "proof_steps": [
            [
              {
                "variable_type": "natural number",
                "variable_name": "n",
                "type": "let_statement",
                "statement": "Let n be a natural number."
              },
              {
                "variable_type": "natural number",
                "variable_name": "m",
                "value": "n + (n + 1)",
                "type": "let_statement",
                "statement": "Let m be n + (n + 1)."
              },
              {
                "type": "assert_statement",
                "proof_method": "basic arithmetic",
                "claim": "n + 1 > n"
              },
              {
                "calculation_sequence": [
                  "m - n = n + (n + 1) - n",
                  "n + (n + 1) - n = n + 1",
                  "n + 1 > n"
                ]
              },
              {
                "type": "conclude_statement",
                "claim": "Thus, for all natural numbers n, there exists a natural number m such that m - n > n."
              }
            ]
          ],
          "claim_label": "thm:exists_m"
        },
        "label": "thm:exists_m",
        "header": "Theorem",
        "claim": "For all natural numbers n, there exists a natural number m such that m - n > n."
      }
    ]
  },
  "greedy": false,
  "declarations": [
    "exists_nat_sub_gt_self"
  ]
}