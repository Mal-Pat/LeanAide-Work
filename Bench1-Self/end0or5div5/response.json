{
  "top_code": "import Mathlib\nuniverse u v w u_1 u_2 u_3 u\u2081 u\u2082 u\u2083\nset_option maxHeartbeats 10000000\nset_option linter.unreachableTactic false\nopen Nat\n",
  "task": "lean_from_json_structured",
  "result": "success",
  "lean_code": "theorem is_divisible_by_five_iff_last_digit_zero_or_five : \u2200 {n : \u2115}, n % 10 = 0 \u2228 n % 10 = 5 \u2192 5 \u2223 n :=\n    by\n    intro n a_13397840144843358689\n    if condition_539958120475410144 : n % 10 = 0 then\n      \n      have assert_14624567202372330351 : 10 \u2223 n :=\n        by\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: 10 \u2223 n\"\n        simp_all only [OfNat.zero_ne_ofNat, or_false]\n        sorry\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: 10 \u2223 n\"\n      have assert_14491579695485910030 : \u2203 (k : \u2115), n = 10 * k :=\n        by\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k\"\n        simp_all only [OfNat.zero_ne_ofNat, or_false]\n        exact assert_14624567202372330351\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k\"\n      let \u27e8k, assert_13915564691081828623\u27e9 := assert_14491579695485910030\n      have assert_14617578209288026815 : n = 5 * (2 * k) :=\n        by\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: n = 5 * (2 * k)\"\n        subst assert_13915564691081828623\n        simp_all only [OfNat.zero_ne_ofNat, or_false, mul_mod_right, dvd_mul_right, mul_eq_mul_left_iff,\n          OfNat.ofNat_ne_zero, exists_eq']\n        sorry\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: n = 5 * (2 * k)\"\n      exact Dvd.intro (2 * k) (id (Eq.symm assert_14617578209288026815))\n    else\n      if condition_7373442126900311225 : n % 10 = 5 then\n        \n        have assert_4532435913572188164 : \u2203 (k : \u2115), n = 10 * k + 5 :=\n          by\n          trace\n            \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k + 5\"\n          simp_all only [OfNat.ofNat_ne_zero, or_true, not_false_eq_true]\n          sorry\n          trace\n            \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: \u2203 k, n = 10 * k + 5\"\n        let \u27e8k, assert_1284482720153497458\u27e9 := assert_4532435913572188164\n        have assert_8295422331937614310 : n = 5 * (2 * k + 1) :=\n          by\n          trace\n            \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: n = 5 * (2 * k + 1)\"\n          subst assert_1284482720153497458\n          simp_all only [OfNat.ofNat_ne_zero, or_true, not_false_eq_true, mul_add_mod_self_left, reduceMod,\n            Nat.add_right_cancel_iff, mul_eq_mul_left_iff, or_false, exists_eq']\n          sorry\n          trace\n            \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer [] {aesopPremises := 0, autoPremises := 0} for goal: n = 5 * (2 * k + 1)\"\n        exact Dvd.intro (2 * k + 1) (id (Eq.symm assert_8295422331937614310))\n      else\n        trace\n          \"Automation Tactics first\\n  | (simp?; done)\\n  | hammer {aesopPremises := 5, autoPremises := 0} for goal: 5 \u2223 n\"\n        simp_all only [or_self]\n        trace\n          \"Finished Automation Tactics first\\n  | (simp?; done)\\n  | hammer {aesopPremises := 5, autoPremises := 0} for goal: 5 \u2223 n\"\n    done",
  "json_structured": {
    "document": {
      "type": "document",
      "body": [
        {
          "type": "Theorem",
          "proof": [
            {
              "variable_type": "integer",
              "variable_name": "n",
              "type": "let_statement",
              "statement": "Let the number be n."
            },
            {
              "type": "multi-condition_cases_proof",
              "proof_cases": [
                {
                  "proof": [
                    {
                      "type": "assert_statement",
                      "claim": "10 divides n"
                    },
                    {
                      "variable_name": "k",
                      "variable_kind": "integer",
                      "type": "some_statement",
                      "statement": "n = 10 * k"
                    },
                    {
                      "variable_name": "k",
                      "variable_kind": "integer",
                      "type": "some_statement",
                      "statement": "n = 5 * (2 * k)"
                    }
                  ],
                  "condition": "n % 10 = 0"
                },
                {
                  "proof": [
                    {
                      "variable_name": "k",
                      "variable_kind": "integer",
                      "type": "some_statement",
                      "statement": "n = 10 * k + 5"
                    },
                    {
                      "variable_name": "k",
                      "variable_kind": "integer",
                      "type": "some_statement",
                      "statement": "n = 5 * (2 * k + 1)"
                    }
                  ],
                  "condition": "n % 10 = 5"
                }
              ]
            },
            {
              "type": "conclude_statement",
              "claim": "5 divides n"
            }
          ],
          "label": "thm:div5_lastdigit",
          "header": "Theorem",
          "claim": "If the last digit of a number is 0 or 5, then it is divisible by 5."
        }
      ]
    }
  },
  "greedy": false,
  "declarations": [
    "is_divisible_by_five_iff_last_digit_zero_or_five"
  ]
}