{
  "task": "lean_from_json_structured",
  "result": "error",
  "json_structured": {
    "type": "object",
    "title": "Mathematical Document Wrapper",
    "required": [
      "document"
    ],
    "properties": {
      "document": {
        "type": "array",
        "items": {
          "anyOf": [
            {
              "$ref": "#/$defs/Theorem"
            }
          ]
        },
        "description": "The root of the mathematical document, containing a sequence of environments."
      }
    },
    "document": [
      {
        "type": "Theorem",
        "proof": {
          "type": "Proof",
          "proof_steps": [
            [
              {
                "variable_name": "p",
                "variable_kind": "natural number",
                "type": "some_statement",
                "properties": "E = 2*p"
              },
              {
                "variable_name": "q",
                "variable_kind": "natural number",
                "type": "some_statement",
                "properties": "O = 2*q + 1"
              },
              {
                "variable_name": "S",
                "value": "E + O",
                "type": "let_statement"
              },
              {
                "type": "assert_statement",
                "proof_method": "By substitution and simplification.",
                "claim": "S = 2*(p + q) + 1",
                "calculation": {
                  "calculation_sequence": [
                    "S = E + O",
                    "S = (2*p) + (2*q + 1)",
                    "S = 2*(p + q) + 1"
                  ]
                }
              },
              {
                "variable_name": "k",
                "value": "p + q",
                "type": "let_statement"
              },
              {
                "type": "assert_statement",
                "results_used": [
                  {
                    "statement": "The sum of two natural numbers is another natural number."
                  }
                ],
                "claim": "k is a natural number."
              },
              {
                "type": "assert_statement",
                "proof_method": "By substituting k = p + q.",
                "claim": "S = 2*k + 1"
              },
              {
                "type": "assert_statement",
                "results_used": [
                  {
                    "statement": "S can be expressed as 2*k + 1 for some natural number k."
                  },
                  {
                    "statement": "The definition of an odd number."
                  }
                ],
                "claim": "S is an odd number."
              },
              {
                "type": "conclude_statement",
                "claim": "The sum of an even natural number and an odd natural number is an odd natural number."
              }
            ]
          ],
          "claim_label": "thm:sum_of_even_and_odd"
        },
        "label": "thm:sum_of_even_and_odd",
        "hypothesis": [
          {
            "variable_type": "even natural number",
            "variable_name": "E",
            "type": "let_statement"
          },
          {
            "variable_type": "odd natural number",
            "variable_name": "O",
            "type": "let_statement"
          }
        ],
        "header": "Theorem",
        "claim": "The sum of an even natural number and an odd natural number is an odd natural number."
      }
    ],
    "description": "JSON schema for a structured mathematical document.",
    "additionalProperties": false,
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$defs": {
      "some_statement": {
        "type": "object",
        "required": [
          "type",
          "variable_name"
        ],
        "properties": {
          "variable_name": {
            "type": "string"
          },
          "variable_kind": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "some_statement"
          },
          "properties": {
            "type": "string"
          }
        },
        "description": "A statement introducing a new variable and saying that **some** value of this variable is as required (i.e., an existence statement). This is possibly with given type and/or property. This corresponds to statements like 'for some integer `n` ...' or 'There exists an integer `n` ....'",
        "additionalProperties": false
      },
      "let_statement": {
        "type": "object",
        "required": [
          "type",
          "variable_name"
        ],
        "properties": {
          "variable_type": {
            "type": "string"
          },
          "variable_name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "const": "let_statement"
          }
        },
        "description": "A statement introducing a new variable with given value, type and/or property.",
        "additionalProperties": false
      },
      "conclude_statement": {
        "type": "object",
        "required": [
          "type",
          "claim"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "conclude_statement"
          },
          "claim": {
            "type": "string"
          }
        },
        "description": "Conclude a claim obtained from the steps so far. This is typically the final statement of a proof giving the conclusion of the theorem.",
        "additionalProperties": false
      },
      "calculation_step": {
        "type": "string",
        "description": "A step, typically an equality or inequality, in a calculation or computation."
      },
      "calculation": {
        "type": "object",
        "properties": {
          "calculation_sequence": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/calculation_step"
            },
            "description": "A list of elements of type `calculation_step`."
          }
        },
        "description": "An equation, inequality, short calculation etc."
      },
      "assert_statement": {
        "type": "object",
        "required": [
          "type",
          "claim"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "assert_statement"
          },
          "results_used": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "statement"
              ],
              "properties": {
                "statement": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "proof_method": {
            "type": "string"
          },
          "claim": {
            "type": "string"
          },
          "calculation": {
            "$ref": "#/$defs/calculation"
          }
        },
        "description": "A mathematical statement whose proof is a straightforward consequence of given and known results following some method.",
        "additionalProperties": false
      },
      "Theorem": {
        "type": "object",
        "required": [
          "type",
          "label",
          "header",
          "claim"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "Theorem"
          },
          "proof": {
            "description": "Proof of the theorems, if it is present soon after the statement.",
            "$ref": "#/$defs/Proof"
          },
          "label": {
            "type": "string",
            "description": "Unique identifier/label for referencing (e.g., 'thm:main', 'lem:pumping')."
          },
          "hypothesis": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/$defs/let_statement"
                }
              ]
            },
            "description": "(OPTIONAL) The hypothesis or assumptions of the theorem, consisting of statements like 'let', 'assume', etc."
          },
          "header": {
            "type": "string",
            "enum": [
              "Theorem"
            ],
            "description": "The type of theorem-like environment. Must be one of the predefined values."
          },
          "claim": {
            "type": "string",
            "description": "The statement."
          }
        },
        "description": "A mathematical theorem, lemma, proposition, corollary, or claim.",
        "additionalProperties": false
      },
      "Proof": {
        "type": "object",
        "required": [
          "type",
          "claim_label",
          "proof_steps"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "Proof"
          },
          "proof_steps": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/$defs/LogicalStepSequence"
                }
              ]
            },
            "description": "Steps in the proof."
          },
          "claim_label": {
            "type": "string",
            "description": "Theorem label being proved."
          }
        },
        "description": "A proof environment.",
        "additionalProperties": false
      },
      "LogicalStepSequence": {
        "type": "array",
        "items": {
          "anyOf": [
            {
              "$ref": "#/$defs/let_statement"
            },
            {
              "$ref": "#/$defs/assert_statement"
            },
            {
              "$ref": "#/$defs/some_statement"
            },
            {
              "$ref": "#/$defs/conclude_statement"
            }
          ]
        },
        "description": "A sequence of structured logical steps, typically used within a proof or derivation, consisting of statements like 'let', 'assert', 'assume', etc."
      }
    }
  },
  "greedy": false,
  "error": "error in code generation: codegen: no function found for key object available keys are [(some Table), (some calculation), (some definition), (some image), (some section), (some assume_statement), (some some_statement), (some contradiction_statement), (some abstract), (some author), (some table), (some citation), (some assert_statement), (some title), (some multi-condition_cases_statement), (some proof), (some internalreference), (some theorem), (some conclude_statement), (some remark), (some induction_statement), (some metadata), (some paragraph), (some logicalstepsequence), (some let_statement), (some document), (some Figure), (some condition_cases_statement), (some figure), (some bi-implication_cases_statement), (some bibliography), (some pattern_cases_statement)]"
}