Convert the given mathematical statement and its proof into the format of the JSON Schema given below.
ONLY fill the parts of the schema that are applicable.

Mathematical Statement:
If a number is greater than 5, then it is greater than 2

Proof:
Definitions  
D1 ℝ denotes the set of real numbers.  
D2 For all a,b ∈ ℝ, a > b means a – b ∈ (0,∞).  

Axioms  
A1 ∀u,v,w ∈ ℝ, (u > v ∧ v > w) → u > w.   (Transitivity of >)  
A2 5 > 2.  

Theorem T1 ∀x ∈ ℝ, x > 5 → x > 2.  

Proof  
1. Let x ∈ ℝ.  
2. Goal: x > 5 → x > 2.  
3. Assume H1: x > 5.  
4. Goal: x > 2.  
5. From H1 and A2 infer C1: x > 5 ∧ 5 > 2.  
6. From C1 and A1 instantiated at u:=x, v:=5, w:=2 infer H2: x > 2.  
7. From H1 and H2 infer I1: x > 5 → x > 2.  
8. From I1 and the arbitrariness of x infer T1: ∀x ∈ ℝ, x > 5 → x > 2.  
QED.

JSON Schema:
{'$schema': 'https://json-schema.org/draft/2020-12/schema', 'title': 'Mathematical Document Wrapper', 'description': 'JSON schema for a structured mathematical document.', 'type': 'object', 'properties': {'document': {'type': 'array', 'description': 'The root of the mathematical document, containing a sequence of environments.', 'items': {'anyOf': [{'$ref': '#/$defs/Title'}, {'$ref': '#/$defs/Abstract'}, {'$ref': '#/$defs/Metadata'}, {'$ref': '#/$defs/Section'}, {'$ref': '#/$defs/Theorem'}, {'$ref': '#/$defs/Definition'}, {'$ref': '#/$defs/let_statement'}, {'$ref': '#/$defs/assume_statement'}, {'$ref': '#/$defs/Remark'}, {'$ref': '#/$defs/LogicalStepSequence'}, {'$ref': '#/$defs/Paragraph'}, {'$ref': '#/$defs/Proof'}, {'$ref': '#/$defs/Figure'}, {'$ref': '#/$defs/Table'}, {'$ref': '#/$defs/Bibliography'}]}}}, 'required': ['document'], 'additionalProperties': False, '$defs': {'Title': {'type': 'object', 'description': 'The title of the document.', 'properties': {'type': {'type': 'string', 'const': 'Title', 'description': 'The type of this document element.'}, 'title': {'type': 'string', 'description': 'The title text.'}}, 'required': ['type', 'title'], 'additionalProperties': False}, 'Abstract': {'type': 'object', 'description': 'The abstract of the document.', 'properties': {'type': {'type': 'string', 'const': 'Abstract', 'description': 'The type of this document element.'}, 'abstract': {'type': 'string', 'description': 'The abstract text.'}}, 'required': ['type', 'abstract'], 'additionalProperties': False}, 'Section': {'type': 'object', 'description': 'A section of the document.', 'properties': {'type': {'type': 'string', 'const': 'Section', 'description': 'The type of this document element.'}, 'content': {'type': 'array', 'description': 'The content of the section.', 'items': {'anyOf': [{'$ref': '#/$defs/Section'}, {'$ref': '#/$defs/Theorem'}, {'$ref': '#/$defs/Definition'}, {'$ref': '#/$defs/let_statement'}, {'$ref': '#/$defs/assume_statement'}, {'$ref': '#/$defs/Remark'}, {'$ref': '#/$defs/LogicalStepSequence'}, {'$ref': '#/$defs/Paragraph'}, {'$ref': '#/$defs/Proof'}, {'$ref': '#/$defs/Figure'}, {'$ref': '#/$defs/Table'}]}}, 'label': {'type': 'string', 'description': 'Section identifier.'}, 'level': {'type': 'integer', 'description': 'The section level such as `1` for a section, `2` for a subsection.'}, 'header': {'type': 'string', 'description': 'The section header.'}}, 'required': ['type', 'label', 'header', 'content'], 'additionalProperties': False}, 'Theorem': {'type': 'object', 'description': 'A mathematical theorem, lemma, proposition, corollary, or claim.', 'properties': {'type': {'type': 'string', 'const': 'Theorem', 'description': 'The type of this document element.'}, 'hypothesis': {'type': 'array', 'description': "(OPTIONAL) The hypothesis or assumptions of the theorem, consisting of statements like 'let', 'assume', etc.", 'items': {'anyOf': [{'$ref': '#/$defs/let_statement'}, {'$ref': '#/$defs/assume_statement'}, {'$ref': '#/$defs/some_statement'}]}}, 'claim': {'type': 'string', 'description': 'The statement.'}, 'label': {'type': 'string', 'description': "Unique identifier/label for referencing (e.g., 'thm:main', 'lem:pumping')."}, 'proof': {'$ref': '#/$defs/Proof', 'description': 'Proof of the theorems, if it is present soon after the statement.'}, 'header': {'type': 'string', 'description': 'The type of theorem-like environment. Must be one of the predefined values.', 'enum': ['Theorem', 'Lemma', 'Proposition', 'Corollary', 'Claim']}, 'citations': {'type': 'array', 'description': '(OPTIONAL) Explicit list of citations relevant to this statement.', 'items': {'$ref': '#/$defs/Citation'}}, 'internal_references': {'type': 'array', 'description': '(OPTIONAL) Explicit list of internal references mentioned in the statement.', 'items': {'$ref': '#/$defs/InternalReference'}}}, 'required': ['type', 'label', 'header', 'claim'], 'additionalProperties': False}, 'Definition': {'type': 'object', 'description': 'A mathematical definition.', 'properties': {'type': {'type': 'string', 'const': 'Definition', 'description': 'The type of this document element.'}, 'definition': {'type': 'string', 'description': 'Definition content.'}, 'label': {'type': 'string', 'description': 'Definition identifier.'}, 'header': {'type': 'string', 'description': 'The definition type.', 'enum': ['Definition', 'Notation', 'Terminology', 'Convention']}, 'citations': {'type': 'array', 'description': '(OPTIONAL) Explicit list of citations relevant to this theorem statement.', 'items': {'$ref': '#/$defs/Citation'}}, 'internal_references': {'type': 'array', 'description': '(OPTIONAL) Explicit list of internal references mentioned in the theorem statement.', 'items': {'$ref': '#/$defs/InternalReference'}}}, 'required': ['type', 'label', 'header', 'definition'], 'additionalProperties': False}, 'Remark': {'type': 'object', 'description': 'A remark or note.', 'properties': {'type': {'type': 'string', 'const': 'Remark', 'description': 'The type of this document element.'}, 'remark': {'type': 'string', 'description': 'Remark content.'}, 'label': {'type': 'string', 'description': 'Remark identifier.'}, 'header': {'type': 'string', 'description': 'Remark type.', 'enum': ['Remark', 'Example', 'Note', 'Observation', 'Warning']}, 'citations': {'type': 'array', 'description': '(OPTIONAL) Explicit list of citations relevant to this statement.', 'items': {'$ref': '#/$defs/Citation'}}, 'internal_references': {'type': 'array', 'description': '(OPTIONAL) Explicit list of internal references mentioned in the statement.', 'items': {'$ref': '#/$defs/InternalReference'}}}, 'required': ['type', 'label', 'header', 'remark'], 'additionalProperties': False}, 'LogicalStepSequence': {'type': 'array', 'description': "A sequence of structured logical steps, typically used within a proof or derivation, consisting of statements like 'let', 'assert', 'assume', etc.", 'items': {'anyOf': [{'$ref': '#/$defs/let_statement'}, {'$ref': '#/$defs/assert_statement'}, {'$ref': '#/$defs/assume_statement'}, {'$ref': '#/$defs/some_statement'}, {'$ref': '#/$defs/pattern_cases_statement'}, {'$ref': '#/$defs/bi-implication_cases_statement'}, {'$ref': '#/$defs/condition_cases_statement'}, {'$ref': '#/$defs/multi-condition_cases_statement'}, {'$ref': '#/$defs/induction_statement'}, {'$ref': '#/$defs/calculation'}, {'$ref': '#/$defs/contradiction_statement'}, {'$ref': '#/$defs/conclude_statement'}]}}, 'Proof': {'type': 'object', 'description': 'A proof environment.', 'properties': {'type': {'type': 'string', 'const': 'Proof', 'description': 'The type of this document element.'}, 'claim_label': {'type': 'string', 'description': 'Theorem label being proved.'}, 'proof_steps': {'type': 'array', 'description': 'Steps in the proof.', 'items': {'anyOf': [{'$ref': '#/$defs/Remark'}, {'$ref': '#/$defs/LogicalStepSequence'}, {'$ref': '#/$defs/Paragraph'}, {'$ref': '#/$defs/Figure'}, {'$ref': '#/$defs/Table'}]}}}, 'required': ['type', 'claim_label', 'proof_steps'], 'additionalProperties': False}, 'let_statement': {'type': 'object', 'description': 'A statement introducing a new variable with given value, type and/or property.', 'properties': {'type': {'type': 'string', 'const': 'let_statement', 'description': 'The type of this logical step.'}, 'variable_name': {'type': 'string', 'description': 'The variable being defined (use `<anonymous>` if there is no name such as in `We have a group structure on S`)'}, 'value': {'type': 'string', 'description': '(OPTIONAL) The value of the variable being defined. This MUST BE an explicit value. If the value is the obtained from an existence statement, use `assert_statement` instead.'}, 'variable_type': {'type': 'string', 'description': '(OPTIONAL) The type of the variable, such as `real number`, `function from S to T`, `element of G` etc.'}, 'properties': {'type': 'string', 'description': '(OPTIONAL) Specific properties of the variable beyond the type'}, 'statement': {'type': 'string', 'description': 'The full statement made.'}}, 'required': ['type', 'variable_name'], 'additionalProperties': False}, 'some_statement': {'type': 'object', 'description': "A statement introducing a new variable and saying that **some** value of this variable is as required (i.e., an existence statement). This is possibly with given type and/or property. This corresponds to statements like 'for some integer `n` ...' or 'There exists an integer `n` ....'. **NOTE:** It is better to use `assert_statement` instead if the variable is not being defined but rather asserted to exist.", 'properties': {'type': {'type': 'string', 'const': 'some_statement', 'description': 'The type of this logical step.'}, 'variable_name': {'type': 'string', 'description': 'The variable being defined (use `<anonymous>` if there is no name such as in `We have a group structure on S`)'}, 'variable_kind': {'type': 'string', 'description': '(OPTIONAL) The type of the variable, such as `real number`, `function from S to T`, `element of G` etc.'}, 'properties': {'type': 'string', 'description': '(OPTIONAL) Specific properties of the variable beyond the type'}, 'statement': {'type': 'string', 'description': 'The full statement made.'}}, 'required': ['type', 'variable_name'], 'additionalProperties': False}, 'assume_statement': {'type': 'object', 'description': "A mathematical assumption being made. Use 'let_statement' or 'some_statement' if introducing variables or 'assert_statement' to introduce a variable in terms of a property.", 'properties': {'type': {'type': 'string', 'const': 'assume_statement', 'description': 'The type of this logical step.'}, 'assumption': {'type': 'string', 'description': 'The assumption text.'}, 'label': {'type': 'string', 'description': '(OPTIONAL) The label of the assumption, if any.'}, 'citations': {'type': 'array', 'description': '(OPTIONAL) Citations supporting or related to the assumption.', 'items': {'$ref': '#/$defs/Citation'}}, 'internal_references': {'type': 'array', 'description': '(OPTIONAL) Internal references related to the assumption.', 'items': {'$ref': '#/$defs/InternalReference'}}}, 'required': ['type', 'assumption'], 'additionalProperties': False}, 'assert_statement': {'type': 'object', 'description': 'A mathematical statement whose proof is a straightforward consequence of given and known results following some method.', 'properties': {'type': {'type': 'string', 'const': 'assert_statement', 'description': 'The type of this logical step.'}, 'claim': {'type': 'string', 'description': 'The mathematical claim being asserted, NOT INCLUDING proofs, justifications or results used. The claim should be purely a logical statement which is the *consequence* obtained.'}, 'proof_method': {'type': 'string', 'description': '(OPTIONAL) The method used to prove the claim. This could be a direct proof, proof by contradiction, proof by induction, etc. this should be a single phrase or a fairly simple sentence; if a longer justification is needed break the step into smaller steps. If the method is deduction from a result, use `citations`or `internal_references`.'}, 'label': {'type': 'string', 'description': 'The label of the statement, if any. If this statement is used in a proof or as justification for an assertion, it should be labeled so that it can be referenced later.'}, 'citations': {'type': 'array', 'description': '(OPTIONAL) Explicit list of citations relevant to this theorem statement.', 'items': {'$ref': '#/$defs/Citation'}}, 'results_used': {'type': 'array', 'description': '(OPTIONAL) Explicit list of results used in the proof, for example where the assertion says "using ...". Include both standard results and results from the document itself, with references where available.', 'items': {'type': 'object', 'properties': {'statement': {'type': 'string', 'description': 'The statement of the result used.'}, 'target_identifier': {'type': 'string', 'description': "(OPTIONAL) The unique 'label' of the document element being referenced (e.g., 'sec:intro', 'thm:main', 'fig:,diagram')."}, 'mathlib_identifier': {'type': 'string', 'description': '(OPTIONAL) The name of the result being used in Lean Prover or its library Mathlib).'}}, 'required': ['statement'], 'additionalProperties': False}}, 'internal_references': {'type': 'array', 'description': '(OPTIONAL) Explicit list of internal references mentioned in the theorem statement.', 'items': {'$ref': '#/$defs/InternalReference'}}, 'calculation': {'$ref': '#/$defs/calculation', 'description': '(OPTIONAL) An equation, inequality, short calculation etc.'}}, 'required': ['type', 'claim'], 'additionalProperties': False}, 'calculation': {'type': 'object', 'description': 'An equation, inequality, short calculation etc.', 'minProperties': 1, 'maxProperties': 1, 'properties': {'inline_calculation': {'type': 'string', 'description': 'A simple calculation or computation written as a single line.'}, 'calculation_sequence': {'type': 'array', 'description': 'A list of elements of type `calculation_step`.', 'items': {'$ref': '#/$defs/calculation_step'}}}}, 'calculation_step': {'type': 'string', 'description': 'A step, typically an equality or inequality, in a calculation or computation. Write the step fully: e.g. in the sequence `a=b\n=c`, write `a=b` and `b=c` as two separate steps and DO NOT OMIT `b` in the second step.'}, 'pattern_cases_statement': {'type': 'object', 'description': 'A proof by cases, with cases determined by matching a pattern.', 'properties': {'type': {'type': 'string', 'const': 'pattern_cases_statement', 'description': 'The type of this logical step.'}, 'on': {'type': 'string', 'description': 'The variable or expression which is being matched against patterns.'}, 'proof_cases': {'type': 'array', 'description': 'A list of elements of type `case`.', 'items': {'$ref': '#/$defs/pattern_case'}}}, 'required': ['type', 'on', 'proof_cases'], 'additionalProperties': False}, 'bi-implication_cases_statement': {'type': 'object', 'description': 'Proof of a statement `P ↔ Q`.', 'properties': {'type': {'type': 'string', 'const': 'bi-implication_cases_statement', 'description': 'The type of this logical step.'}, 'if_proof': {'$ref': '#/$defs/Proof', 'description': 'Proof that `P` implies `Q`.'}, 'only_if_proof': {'$ref': '#/$defs/Proof', 'description': 'Proof that `Q` implies `P`.'}}, 'required': ['type', 'if_proof', 'only_if_proof'], 'additionalProperties': False}, 'condition_cases_statement': {'type': 'object', 'description': 'Proof of a statement based on splitting into cases where a condition is true and false, i.e., an if-then-else proof.', 'properties': {'type': {'type': 'string', 'const': 'condition_cases_statement', 'description': 'The type of this logical step.'}, 'condition': {'type': 'string', 'description': 'The condition based on which the proof is split.'}, 'true_case_proof': {'$ref': '#/$defs/Proof', 'description': 'Proof of the case where the condition is true.'}, 'false_case_proof': {'$ref': '#/$defs/Proof', 'description': 'Proof of the case where the condition is false.'}}, 'required': ['type', 'condition', 'true_case_proof', 'false_case_proof'], 'additionalProperties': False}, 'multi-condition_cases_statement': {'type': 'object', 'description': 'A proof by cases given by three or more conditions.', 'properties': {'type': {'type': 'string', 'const': 'multi-condtion_cases_statement', 'description': 'The type of this logical step.'}, 'proof_cases': {'type': 'array', 'description': 'The conditions and proofs in the different cases.', 'items': {'$ref': '#/$defs/condition_case'}}, 'exhaustiveness': {'$ref': '#/$defs/Proof', 'description': '(OPTIONAL) Proof that the cases are exhaustive.'}}, 'required': ['type', 'proof_cases'], 'additionalProperties': False}, 'pattern_case': {'type': 'object', 'description': 'A case in a proof by cases with cases determined by matching patterns.', 'properties': {'type': {'type': 'string', 'const': 'pattern_case', 'description': 'The type of this logical step.'}, 'pattern': {'type': 'string', 'description': 'The pattern determining this case.'}, 'proof': {'$ref': '#/$defs/Proof', 'description': 'Proof of this case.'}}, 'required': ['type', 'pattern', 'proof'], 'additionalProperties': False}, 'condition_case': {'type': 'object', 'description': 'A case in a proof by cases with cases determined by conditions.', 'properties': {'type': {'type': 'string', 'const': 'condition_case', 'description': 'The type of this logical step.'}, 'condition': {'type': 'string', 'description': 'The condition determining this case.'}, 'proof': {'$ref': '#/$defs/Proof', 'description': 'Proof for this case.'}}, 'required': ['type', 'condition', 'proof'], 'additionalProperties': False}, 'case': {'type': 'object', 'description': 'A case in a proof by cases or proof by induction.', 'properties': {'type': {'type': 'string', 'const': 'case', 'description': 'The type of this logical step.'}, 'condition': {'type': 'string', 'description': "The case condition or pattern; for induction one of 'base' or 'induction-step'; for a side of an 'iff' statement write the claim being proved (i.e., the statement `P => Q` or `Q => P`)."}, 'proof': {'$ref': '#/$defs/Proof', 'description': 'Proof of this case.'}}, 'required': ['type', 'condition', 'proof'], 'additionalProperties': False}, 'induction_statement': {'type': 'object', 'description': 'A proof by induction, with a base case and an induction step.', 'properties': {'type': {'type': 'string', 'const': 'induction_statement', 'description': 'The type of this logical step.'}, 'on': {'type': 'string', 'description': 'The variable or expression on which induction is being done.'}, 'base_case_proof': {'$ref': '#/$defs/Proof', 'description': 'Proof of the base case.'}, 'induction_step_proof': {'$ref': '#/$defs/Proof', 'description': 'Proof of the induction step, which typically shows that if the statement holds for `n`, it holds for `n+1`.'}}, 'required': ['type', 'on', 'base_case_proof', 'induction_step_proof'], 'additionalProperties': False}, 'contradiction_statement': {'type': 'object', 'description': 'A proof by contradiction, with an assumption and a proof of the contradiction.', 'properties': {'type': {'type': 'string', 'const': 'contradiction_statement', 'description': 'The type of this logical step.'}, 'assumption': {'type': 'string', 'description': 'The assumption being made to be contradicted.'}, 'proof': {'$ref': '#/$defs/Proof', 'description': 'The proof of the contradiction given the assumption.'}}, 'required': ['type', 'assumption', 'proof'], 'additionalProperties': False}, 'conclude_statement': {'type': 'object', 'description': 'Conclude a claim obtained from the steps so far. This is typically the final statement of a proof giving the conclusion of the theorem.', 'properties': {'type': {'type': 'string', 'const': 'conclude_statement', 'description': 'The type of this logical step.'}, 'claim': {'type': 'string', 'description': 'The conclusion of the proof.'}}, 'required': ['type', 'claim'], 'additionalProperties': False}, 'Metadata': {'type': 'object', 'description': 'Metadata about the document, such as authors, keywords, and classification.', 'properties': {'type': {'type': 'string', 'const': 'Metadata', 'description': 'The type of this document element.'}, 'authors': {'type': 'array', 'description': 'List of authors.', 'items': {'$ref': '#/$defs/Author'}}, 'keywords': {'type': 'array', 'description': 'List of keywords describing the document.', 'items': {'type': 'string'}}, 'msc_codes': {'type': 'array', 'description': 'Mathematics Subject Classification codes.', 'items': {'type': 'string'}}, 'publication_date': {'type': 'string', 'description': 'Date of publication or creation (ISO 8601 format recommended).', 'format': 'date'}, 'source': {'type': 'string', 'description': 'Publication source, e.g., Journal label, volume, pages, conference proceedings.'}}, 'required': ['type', 'authors'], 'additionalProperties': False}, 'Author': {'type': 'object', 'description': 'An author of the document.', 'properties': {'name': {'type': 'string', 'description': 'Full name of the author.'}, 'affiliation': {'type': 'string', 'description': "(OPTIONAL) Author's affiliation."}}, 'required': ['name'], 'additionalProperties': False}, 'Paragraph': {'type': 'object', 'description': 'A block of plain text, potentially containing inline references.', 'properties': {'type': {'type': 'string', 'const': 'Paragraph', 'description': 'The type of this document element.'}, 'text': {'type': 'string', 'description': "The main text content of the paragraph. Inline citations (e.g., [1], [Knuth74]) and internal references (e.g., see Section 2, Theorem 3) might be embedded within this string or explicitly listed in 'citations'/'internal_references'."}, 'citations': {'type': 'array', 'description': '(OPTIONAL) Explicit list of citations mentioned in this paragraph.', 'items': {'$ref': '#/$defs/Citation'}}, 'internal_references': {'type': 'array', 'description': '(OPTIONAL) Explicit list of internal references mentioned in this paragraph.', 'items': {'$ref': '#/$defs/InternalReference'}}}, 'required': ['type', 'text'], 'additionalProperties': False}, 'Figure': {'type': 'object', 'description': 'A figure or image.', 'properties': {'type': {'type': 'string', 'const': 'Figure', 'description': 'The type of this document element.'}, 'label': {'type': 'string', 'description': "Unique identifier/label for referencing (e.g., 'fig:flowchart')."}, 'source': {'type': 'string', 'description': 'URL or path to the image file.'}, 'caption': {'type': 'string', 'description': '(OPTIONAL) Caption describing the figure.'}, 'alt_text': {'type': 'string', 'description': '(OPTIONAL) Alternative text for accessibility.'}}, 'required': ['type', 'label', 'source'], 'additionalProperties': False}, 'Table': {'type': 'object', 'description': 'A data table.', 'properties': {'type': {'type': 'string', 'const': 'Table', 'description': 'The type of this document element.'}, 'label': {'type': 'string', 'description': "Unique identifier/label for referencing (e.g., 'tab:results')."}, 'caption': {'type': 'string', 'description': '(OPTIONAL) Caption describing the table.'}, 'content': {'type': 'array', 'description': 'Table data, represented as an array of rows, where each row is an array of cell strings.', 'items': {'type': 'array', 'items': {'type': 'string'}}}, 'header_row': {'type': 'boolean', 'description': "(OPTIONAL) Indicates if the first row in 'content' is a header row. Default: false", 'default': False}}, 'required': ['type', 'label', 'content'], 'additionalProperties': False}, 'Bibliography': {'type': 'object', 'description': 'The bibliography or list of references section.', 'properties': {'type': {'type': 'string', 'const': 'Bibliography', 'description': 'The type of this document element.'}, 'header': {'type': 'string', 'description': "The section header (e.g., 'References', 'Bibliography')."}, 'entries': {'type': 'array', 'description': 'List of bibliography entries.', 'items': {'$ref': '#/$defs/BibliographyEntry'}}}, 'required': ['type', 'header', 'entries'], 'additionalProperties': False}, 'BibliographyEntry': {'type': 'object', 'description': 'A single entry in the bibliography.', 'properties': {'key': {'type': 'string', 'description': "Unique key used for citations (e.g., 'Knuth1974', '[1]')."}, 'formatted_entry': {'type': 'string', 'description': 'The full bibliographic reference, formatted as text (e.g., APA, BibTeX style).'}}, 'required': ['key', 'formatted_entry'], 'additionalProperties': False}, 'Citation': {'type': 'object', 'description': 'An inline citation pointing to one or more bibliography entries.', 'properties': {'cite_keys': {'type': 'array', 'description': 'An array of bibliography keys being cited.', 'items': {'type': 'string'}, 'minItems': 1}}, 'required': ['cite_keys'], 'additionalProperties': False}, 'InternalReference': {'type': 'object', 'description': 'An inline reference to another labeled part of the document (e.g., Section, Theorem, Figure).', 'properties': {'target_identifier': {'type': 'string', 'description': "The unique 'label' of the document element being referenced (e.g., 'sec:intro', 'thm:main', 'fig:diagram')."}}, 'required': ['target_identifier'], 'additionalProperties': False}}}

Give the proof in the format of the JSON Schema given.
Strictly adhere to the schema.