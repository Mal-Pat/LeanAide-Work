{
  "top_code": "import Mathlib\nimport LeanAide.AutoTactic\nimport LeanAide.Syntax\nuniverse u v w u_1 u_2 u_3 u\u2081 u\u2082 u\u2083\nset_option maxHeartbeats 10000000\nset_option linter.unreachableTactic false\n",
  "task": "lean_from_json_structured",
  "result": "success",
  "lean_code": "theorem dvd_add : \u2200 (x y z : \u2124), x \u2223 y \u2192 x \u2223 z \u2192 x \u2223 y + z :=\n    by\n    intro x y\n    have assert_14293591730991011073 :\n      \u2200 {z p : \u2124}, x \u2223 y \u2192 x \u2223 z \u2192 x \u2223 y \u2192 x \u2223 z \u2192 x \u2223 y \u2192 x \u2223 z \u2192 x \u2223 y \u2192 x \u2223 z \u2192 y = x * p :=\n      by\n      intro z p a a_1 a_2 a_3 a_4 a_5 a_6 a_7\n      simp_all only\n      sorry\n    have assert_7682900098182795272 : \u2200 (z : \u2124), x \u2223 y \u2192 x \u2223 z \u2192 \u2203 (q : \u2124), z = x * q := by sorry\n    have assert_4470101704052999801 : \u2200 {z : \u2124}, x \u2223 y \u2192 x \u2223 z \u2192 \u2203 (n : \u2124), x \u2223 y + z \u2227 y + z = x * n := by sorry\n    have assert_11423344126898442447 : \u2200 {z : \u2124}, x \u2223 y \u2192 x \u2223 z \u2192 \u2203 (n : \u2124), n = x * (y / x + z / x) :=\n      by\n      intro z a a_1\n      simp_all only [forall_const, exists_and_left, exists_eq]\n    have assert_12099200269796900728 : \u2200 {z : \u2124}, x \u2223 y \u2192 x \u2223 z \u2192 \u2203 (k : \u2124), y + z = x * k :=\n      by\n      intro z a a_1\n      simp_all only [forall_const, exists_and_left, exists_eq, implies_true, imp_self]\n    have assert_9184688943423024527 : \u2200 {z : \u2124}, x \u2223 y \u2192 x \u2223 z \u2192 x \u2223 y + z :=\n      by\n      intro z a a_1\n      simp_all only [forall_const, exists_and_left, and_true, exists_eq, implies_true, imp_self]\n    have : \u2200 (z : \u2124), x \u2223 y \u2192 x \u2223 z \u2192 x \u2223 y + z := by\n      intro z a a_1\n      simp_all only [forall_const, true_and, implies_true, imp_self, exists_eq]\n    intro z a_1 a_2\n    simp_all only [forall_const, true_and, implies_true, imp_self, exists_eq]\n    intro z a a_1\n    sorry",
  "json_structured": {
    "document": [
      {
        "type": "Theorem",
        "proof": {
          "type": "Proof",
          "proof_steps": [
            {
              "type": "Paragraph",
              "text": "The statement \"integer a divides an integer b\" is equivalent to \"there exists an integer k such that b = a * k\"."
            },
            {
              "type": "LogicalStepSequence",
              "items": [
                {
                  "type": "assert_statement",
                  "results_used": [
                    {
                      "statement": "Since integer x divides integer y, there exists an integer p such that y = x * p"
                    }
                  ],
                  "proof_method": "from the definition of divisibility",
                  "label": "eq:y_def",
                  "claim": "y = x * p"
                },
                {
                  "type": "assert_statement",
                  "results_used": [
                    {
                      "statement": "Since integer x divides integer z, there exists an integer q such that z = x * q"
                    }
                  ],
                  "proof_method": "from the definition of divisibility",
                  "label": "eq:z_def",
                  "claim": "z = x * q"
                },
                {
                  "variable_type": "integer",
                  "variable_name": "n",
                  "value": "(y + z)",
                  "type": "let_statement",
                  "properties": "since the sum of two integers is an integer"
                },
                {
                  "type": "assert_statement",
                  "results_used": [
                    {
                      "target_identifier": "eq:y_def",
                      "statement": "y = x * p"
                    },
                    {
                      "target_identifier": "eq:z_def",
                      "statement": "z = x * q"
                    }
                  ],
                  "proof_method": "by substituting y and z",
                  "label": "eq:n_substitution",
                  "claim": "n = (x * p) + (x * q)"
                },
                {
                  "type": "assert_statement",
                  "proof_method": "by rearranging the expression",
                  "label": "eq:n_rearranged",
                  "claim": "n = x * (p + q)"
                },
                {
                  "variable_type": "integer",
                  "variable_name": "k",
                  "value": "(p + q)",
                  "type": "let_statement",
                  "properties": "since the sum of two integers is an integer"
                },
                {
                  "type": "assert_statement",
                  "proof_method": "by substituting (p + q)",
                  "claim": "n = x * k"
                },
                {
                  "type": "assert_statement",
                  "results_used": [
                    {
                      "statement": "Since there exists an integer k such that n = x * k"
                    }
                  ],
                  "proof_method": "from the definition of divisibility",
                  "claim": "x divides n"
                },
                {
                  "type": "conclude_statement",
                  "results_used": [
                    {
                      "statement": "n = (y + z)"
                    }
                  ],
                  "claim": "x divides (y + z)"
                }
              ]
            }
          ],
          "claim_label": "thm:divisibility_sum"
        },
        "label": "thm:divisibility_sum",
        "hypothesis": [
          {
            "type": "assume_statement",
            "assumption": "an integer x divides an integer y"
          },
          {
            "type": "assume_statement",
            "assumption": "x divides an integer z"
          }
        ],
        "header": "Theorem",
        "claim": "x divides (y + z)"
      }
    ]
  },
  "greedy": false,
  "declarations": [
    "dvd_add"
  ]
}